#!/bin/bash

# remove string from file (remove line where pattern matches)

# @example
# delete lines containing "exit 0" from /etc/rc.local
# RPI_REMOVE_FILE="${RPI_ROOT}/etc/rc.local"
# RPI_REMOVE_PATTERN="exit 0"

# @example
# remove user "foo" from /etc/passwd and /etc/shadow
# RPI_REMOVE_FILE=( "${RPI_ROOT}/etc/passwd" "${RPI_ROOT}/etc/shadow" )
# RPI_REMOVE_PATTERN="^foo.*"


# default options
RPI_REMOVE_FILE="${RPI_REMOVE_FILE:=}"
RPI_REMOVE_PATTERN="${RPI_REMOVE_PATTERN:=}"


function rpi_remove_prerun() {
    [[ -n "${RPI_REMOVE_PATTERN}" ]] || error "RPI_REMOVE_PATTERN"
    [[ -n "${RPI_REMOVE_FILE}" ]] || error "RPI_REMOVE_FILE is not set."
}

function rpi_remove_run() {
    local file
    for file in "${RPI_REMOVE_FILE[@]}" ; do
        rpi_remove_pattern_from_file "${RPI_REMOVE_PATTERN}" "${file}"
    done
}

function rpi_remove_description() {
    echo "remove sed pattern \"/.../d\" from file where it matches"
}

function rpi_remove_help_vars() {
    help_var "RPI_REMOVE_FILE" "file to remove pattern from"
    help_var "RPI_REMOVE_PATTERN" "sed pattern to match (and remove)"
}

# ---------------------------------------------------------------------
function rpi_remove_pattern_from_file() {
    local pattern="$1"
    local files="${*:2}"
    { [[ -n "${pattern}" ]] && [[ -n "${files}" ]]; } || error "missing arguments. remove line"
    local file
    for file in "${files[@]}" ; do
        echo " removing \"${pattern}\" from \"${file}\""
        sudo sed "/${pattern}/d" -i "${file}" || error "remove_line ${pattern} ${file}"
    done
}
